{"version":3,"sources":["trivia.png","components/ButtonToConfig.js","services/apiTokenService.js","services/apiQuestionsService.js","components/LoginArea.js","actions/index.js","components/Home.js","components/Header.js","components/Clock.js","components/Quiz.js","components/GameScreen.js","components/ConfigurationScreen.js","components/FeedbackAnswears.js","components/Feedback.js","components/RankingScreen.js","serviceWorker.js","reducers/apiReducer.js","reducers/loginReducer.js","reducers/scoreReducer.js","reducers/counterReducer.js","reducers/rankingReducer.js","reducers/configReducer.js","reducers/index.js","store/index.js","index.js","App.js"],"names":["module","exports","ButtonToConfig","to","data-testid","className","React","Component","axios","require","apiTokenService","get","then","response","getQuestions","token","confCategory","confDifficulty","confType","LoginArea","props","state","name","email","avatar","e","this","setState","target","value","hash","md5","storeToken","saveUserData","storage","player","assertions","score","gravatarEmail","localStorage","setItem","JSON","stringify","parse","getItem","htmlFor","type","id","onChange","changeName","changeEmail","src","alt","renderNameInput","renderEmailInput","onClick","clickToStartGame","disabled","isDisabled","connect","dispatch","payload","getUserData","Home","logo","Header","userData","loginReducer","scoreReducer","points","defaultProps","Clock","timerID","setInterval","tick","clearInterval","pausecounter","tok","time","freezing","freezeTheClock","counterReducer","count","freeze","Quiz","index","questionClicked","Arranswer","shuffle","restore","loadQuestions","countRightA","saveLocalStorage","shuffleAnswers","callAnswers","map","rightChoice","wrongChoice","clickToNext","finishQuestions","tolkien","questions","newOrderedAnswers","incorrect_answers","correct_answer","sort","Math","random","difPoints","sumPoints","difficulty","calculatePoints","sendScoreToRanking","rankingStored","newRanking","picture","category","question","afterTheCLick","beforeTheCLick","nextButton","length","questionBuilder","apiReducer","configReducer","generateQuestions","updateScore","updateRanking","GameScreen","arrCategory","tag","arrDifficulty","arrType","ConfigurationScreen","elem","setCategory","setDifficulty","setType","handleCategory","key","handleDifficulty","handleType","cofCategory","cofDifficulty","cofType","FeedbackAnswears","totalAnswears","Feedback","clearlogin","clearpoints","newGame","totalAns","scorePoints","p-3","mb-3","tryAgain","restartGame","answers","RankingScreen","ranking","a","b","i","rankingReducer","Boolean","window","location","hostname","match","initialState","action","data","console","log","results","INITIAL_STATE","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","useEffect","document","title","basename","exact","path","component","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06d09242.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass ButtonToConfig extends React.Component {\n  render() {\n    return (\n      <div>\n        <Link to=\"/Configuration\" data-testid=\"btn-settings\" className=\"btn btn-secondary btn-block mb-3\">CONFIGURAR</Link>\n      </div>\n    );\n  }\n}\n\nexport default ButtonToConfig;\n","const axios = require('axios');\n\nconst URL = 'https://opentdb.com/api_token.php?command=request';\n\nconst apiTokenService = () => axios.get(URL).then((response) => response);\n\nexport default apiTokenService;\n","const axios = require('axios');\n\nconst URL = 'https://opentdb.com/api.php?amount=5&token=';\n\nconst getQuestions = (token, confCategory, confDifficulty, confType) => (\n  axios.get(`${URL}${token}&category=${confCategory}&difficulty=${confDifficulty}&type=${confType}`).then((response) => response)\n);\n\nexport default getQuestions;\n","import React, { Component } from 'react';\nimport md5 from 'md5';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport ButtonToConfig from './ButtonToConfig';\nimport { generateToken, getUserData } from '../actions/index';\n\nclass LoginArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      avatar: '',\n    };\n  }\n\n  changeName(e) {\n    this.setState({ name: e.target.value });\n  }\n\n  changeEmail(e) {\n    const hash = md5(e.target.value);\n    this.setState({ email: e.target.value, avatar: hash });\n  }\n\n  isDisabled() {\n    const { name, email } = this.state;\n    if (name === '' || email === '') return true;\n    return false;\n  }\n\n  clickToStartGame() {\n    const { storeToken, saveUserData } = this.props;\n    const { name, avatar, email } = this.state;\n    storeToken();\n    saveUserData(name, avatar);\n    const storage = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: email,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(storage));\n    const blankStorage = JSON.parse(localStorage.getItem('ranking'));\n    if (!blankStorage) localStorage.setItem('ranking', JSON.stringify([]));\n  }\n\n  renderNameInput() {\n    const { name } = this.state;\n    return (\n      <div className=\"form-group\">\n        <label htmlFor=\"name\">Nome do Jogador</label>\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          data-testid=\"input-player-name\"\n          id=\"name\"\n          onChange={(e) => this.changeName(e)}\n          value={name}\n        />\n      </div>\n    );\n  }\n\n  renderEmailInput() {\n    const { email } = this.state;\n    return (\n      <div className=\"form-group\">\n        <label htmlFor=\"email\">E-mail do Gravatar</label>\n        <input\n          type=\"email\"\n          className=\"form-control\"\n          data-testid=\"input-gravatar-email\"\n          id=\"email\"\n          onChange={(e) => this.changeEmail(e)}\n          value={email}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    const { avatar } = this.state;\n    return (\n      <form className=\"mt-3\">\n        <img className=\"rounded\" src={`https://www.gravatar.com/avatar/${avatar}`} alt=\"avatar\" />\n        {this.renderNameInput()}\n        {this.renderEmailInput()}\n        <Link to=\"/gamepage\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary btn-block mb-3\"\n            data-testid=\"btn-play\"\n            onClick={() => this.clickToStartGame()}\n            disabled={this.isDisabled()}\n          >\n            JOGAR\n          </button>\n          <ButtonToConfig />\n        </Link>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  storeToken: () => dispatch(generateToken()),\n  saveUserData: (name, avatar) => dispatch(getUserData(name, avatar)),\n});\n\nexport default connect(null, mapDispatchToProps)(LoginArea);\n\nLoginArea.propTypes = {\n  storeToken: PropTypes.func.isRequired,\n  saveUserData: PropTypes.func.isRequired,\n};\n","import apiTokenService from '../services/apiTokenService';\nimport getQuestions from '../services/apiQuestionsService';\n\nexport const GENERATE_TOKEN = 'GENERATE_TOKEN';\nexport const STORE_QUESTIONS = 'STORE_QUESTIONS';\nexport const SAVE_USER_DATA = 'SAVE_USER_DATA';\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const CHANGE_DIFFICULTY = 'CHANGE_DIFFICULTY';\nexport const TICK_TOCK = 'TICK_TOCK';\nexport const RESTORE_CLOCK = 'RESTORE_CLOCK';\nexport const UPDATE_RANKING = 'UPDATE_RANKING';\nexport const CLEAR_LOGIN_INFO = 'CLEAR_LOGIN_INFO';\nexport const COUNT_RIGHT_ANSWEAR = 'COUNT_RIGHT_ANSWEAR';\nexport const CLEAR_LOGIN_POINTS = 'CLEAR_LOGIN_POINTS';\nexport const CLOCK_FREEZED = 'CLOCK_FREEZED';\nexport const CONFIG_CATEGORY = 'CONFIG_CATEGORY';\nexport const CONFIG_DIFFICULTY = 'CONFIG_DIFFICULTY';\nexport const CONFIG_TYPE = 'CONFIG_TYPE';\n\nconst storeToken = (payload) => ({\n  type: GENERATE_TOKEN,\n  payload,\n});\n\nconst storeQuestions = (payload) => ({\n  type: STORE_QUESTIONS,\n  payload,\n});\n\nexport const countRight = () => ({\n  type: COUNT_RIGHT_ANSWEAR,\n});\n\nexport const getUserData = (name, avatar) => ({\n  type: SAVE_USER_DATA,\n  name,\n  avatar,\n});\n\nexport const updateScore = (points) => ({\n  type: UPDATE_SCORE,\n  points,\n});\n\nexport const tik = () => ({\n  type: TICK_TOCK,\n});\n\nexport const restoreClock = () => ({\n  type: RESTORE_CLOCK,\n});\n\nexport const freezeClock = () => ({\n  type: CLOCK_FREEZED,\n});\n\nexport const updateRanking = (name, avatar, score) => ({\n  type: UPDATE_RANKING,\n  name,\n  avatar,\n  score,\n});\n\nexport const clearLoginInfo = () => ({\n  type: CLEAR_LOGIN_INFO,\n});\n\nexport const clearLoginPoints = () => ({\n  type: CLEAR_LOGIN_POINTS,\n});\n\nexport const generateToken = () => (\n  (dispatch) => {\n    apiTokenService().then((response) => dispatch(storeToken(response)));\n  }\n);\n\nexport const generateQuestions = (tolkien, confCategory, confDifficulty, confType) => (\n  (dispatch) => {\n    getQuestions(tolkien, confCategory, confDifficulty, confType)\n      .then((response) => dispatch(storeQuestions(response)));\n  }\n);\n\nexport const changeCategory = (confCategory) => ({\n  type: CONFIG_CATEGORY,\n  confCategory,\n});\n\nexport const changeDifficulty = (confDifficulty) => ({\n  type: CONFIG_DIFFICULTY,\n  confDifficulty,\n});\n\nexport const changeType = (confType) => ({\n  type: CONFIG_TYPE,\n  confType,\n});\n","import React, { Component } from 'react';\n\nimport logo from '../trivia.png';\nimport '../App.css';\n\nimport LoginArea from './LoginArea';\n\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <LoginArea />\n        </header>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Header extends Component {\n  render() {\n    const { userData, score } = this.props;\n    return (\n      <div className=\"questions-header row bg-dark align-items-center\">\n        <div className=\"container\">\n          <div className=\"media\">\n            {userData && (\n              <img\n                className=\"mr-3 rounded\"\n                src={`https://www.gravatar.com/avatar/${userData.avatar}`}\n                data-testid=\"header-profile-picture\"\n                alt=\"avatar\"\n              />\n            )}\n            {userData && (\n              <div className=\"media-body\">\n                <p\n                  data-testid=\"header-player-name\"\n                  className=\"h4 text-white\"\n                >\n                  {`Jogador: ${userData.name}`}\n                </p>\n                <p className=\"text-white\">\n                  Pontos:\n                  <span data-testid=\"header-score\" className=\"text-white ml-2\">\n                    {score}\n                  </span>\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userData: state.loginReducer[0],\n  score: state.scoreReducer.points,\n});\n\nexport default connect(mapStateToProps)(Header);\n\nHeader.propTypes = {\n  userData: PropTypes.arrayOf(PropTypes.object),\n  score: PropTypes.number.isRequired,\n};\nHeader.defaultProps = {\n  userData: [],\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { tik, freezeClock } from '../actions/index';\n\nclass Clock extends React.Component {\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000,\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  freezeTheClock() {\n    const { pausecounter } = this.props;\n    pausecounter();\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    const { tok } = this.props;\n    tok();\n  }\n\n  render() {\n    const { time, freezing } = this.props;\n    if (time === 0) this.freezeTheClock();\n    if (freezing) clearInterval(this.timerID);\n    return (\n      <div>\n        <p className=\"lead p-2\">{`Tempo: ${time}`}</p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  time: state.counterReducer.count,\n  freezing: state.counterReducer.freeze,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  tok: () => dispatch(tik()),\n  pausecounter: () => dispatch(freezeClock()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Clock);\n\nClock.propTypes = {\n  time: PropTypes.number.isRequired,\n  tok: PropTypes.func.isRequired,\n  pausecounter: PropTypes.func.isRequired,\n  freezing: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport {\n  generateQuestions, updateScore, restoreClock, updateRanking, countRight, freezeClock,\n} from '../actions/index';\nimport Clock from './Clock';\n\nclass Quiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: 0,\n      questionClicked: false,\n      Arranswer: [],\n      shuffle: true,\n    };\n  }\n\n  componentDidMount() {\n    const { restore } = this.props;\n    restore();\n    this.loadQuestions();\n  }\n\n  rightChoice() {\n    const { countRightA } = this.props;\n    this.saveLocalStorage();\n    countRightA();\n    this.setState({ questionClicked: true });\n  }\n\n  wrongChoice() {\n    this.setState({ questionClicked: true });\n  }\n\n  callAnswers() {\n    const { Arranswer } = this.state;\n    const test = Arranswer;\n    return test;\n  }\n\n  beforeTheCLick() {\n    let count = -1;\n    this.shuffleAnswers();\n    return (\n      this.callAnswers().map((e) => {\n        if (e[1] === 'correct') {\n          return (\n            <button type=\"button\" className=\"btn btn-secondary m-1\" data-testid=\"correct-answer\" onClick={() => this.rightChoice()}>\n              {e[0]}\n            </button>\n          );\n        }\n        count += 1;\n        return (\n          <button\n            className=\"btn btn-secondary m-1\"\n            type=\"button\"\n            data-testid={`wrong-answer${count}`}\n            onClick={() => this.wrongChoice()}\n          >\n            {e}\n          </button>\n        );\n      })\n    );\n  }\n\n  afterTheCLick() {\n    const { pausecounter } = this.props;\n    pausecounter();\n    let count = -1;\n    return (\n      this.callAnswers().map((e) => {\n        if (e[1] === 'correct') {\n          return (\n            <button type=\"button\" data-testid=\"correct-answer\" className=\"Correct btn btn-success m-1\" disabled>\n              {e[0]}\n            </button>\n          );\n        }\n        count += 1;\n        return (\n          <button type=\"button\" data-testid={`wrong-answer${count}`} className=\"Wrong btn btn-danger m-1\" disabled>\n            {e}\n          </button>\n        );\n      })\n    );\n  }\n\n  nextButton() {\n    const { index } = this.state;\n    return (\n      <div>\n        <div>\n          {(index < 4) && (\n            <button\n              className=\"btn btn-primary m-1\"\n              type=\"button\"\n              onClick={() => this.clickToNext()}\n              data-testid=\"btn-next\"\n            >\n              Próxima\n            </button>\n          )}\n          {(index === 4) && (\n            <Link to=\"/feedback\">\n              <button\n                className=\"btn btn-primary m-1\"\n                type=\"button\"\n                onClick={() => this.finishQuestions()}\n                data-testid=\"btn-next\"\n              >\n                Próxima\n              </button>\n            </Link>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  loadQuestions() {\n    const {\n      tolkien, getQuestions,\n      confCategory,\n      confDifficulty,\n      confType,\n    } = this.props;\n    getQuestions(tolkien, confCategory, confDifficulty, confType);\n  }\n\n  clickToNext() {\n    const { restore } = this.props;\n    restore();\n    this.setState((state) => ({\n      index: state.index + 1,\n      questionClicked: false,\n      shuffle: true,\n    }));\n  }\n\n  shuffleAnswers() {\n    const { questions } = this.props;\n    const { index, shuffle } = this.state;\n    const orderedAnswers = [...questions[index].incorrect_answers, [questions[index].correct_answer, 'correct']];\n    const newOrderedAnswers = orderedAnswers.sort(() => Math.random() - 0.5);\n    if (shuffle) {\n      this.setState({\n        shuffle: false,\n        Arranswer: newOrderedAnswers,\n      });\n    }\n  }\n\n  calculatePoints() {\n    const { sumPoints, time, questions } = this.props;\n    const { index } = this.state;\n    let difPoints;\n    const { difficulty } = questions[index];\n    if (difficulty === 'hard') { difPoints = 3; }\n    if (difficulty === 'medium') { difPoints = 2; }\n    if (difficulty === 'easy') { difPoints = 1; }\n    const points = 10 + (time * difPoints);\n    sumPoints(points);\n    return points;\n  }\n\n  saveLocalStorage() {\n    const points = this.calculatePoints();\n    let storage = JSON.parse(localStorage.getItem('state'));\n    storage = {\n      player: {\n        ...storage.player,\n        assertions: storage.player.assertions + 1,\n        score: storage.player.score + points,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(storage));\n  }\n\n  finishQuestions() {\n    const {\n      sendScoreToRanking, name, avatar, score,\n    } = this.props;\n    sendScoreToRanking(name, avatar, score);\n    const rankingStored = JSON.parse(localStorage.getItem('ranking'));\n    const newRanking = [...rankingStored, { name, score, picture: `https://www.gravatar.com/avatar/${avatar}` }];\n    localStorage.setItem('ranking', JSON.stringify(newRanking));\n  }\n\n  questionBuilder() {\n    const { questions, freezing } = this.props;\n    const { index, questionClicked } = this.state;\n    return (\n      <div className=\"card m-5\">\n        <div className=\"card-header\">\n          <p className=\"h5\" data-testid=\"question-category\">{`Categoria: ${questions[index].category}`}</p>\n        </div>\n        <div className=\"card-body\">\n          <p data-testid=\"question-text\" className=\"card-text\">{questions[index].question}</p>\n          {(questionClicked || freezing) ? this.afterTheCLick() : this.beforeTheCLick() }\n          {(questionClicked || freezing) ? this.nextButton() : <Clock />}\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { questions } = this.props;\n    if (questions.length > 0) {\n      return this.questionBuilder();\n    }\n    return (\n      <p className=\"display-4\">Loading Questions...</p>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getQuestions: (tolkien, confCategory, confDifficulty, confType) => dispatch(generateQuestions(\n    tolkien,\n    confCategory,\n    confDifficulty,\n    confType,\n  )),\n  sumPoints: (points) => dispatch(updateScore(points)),\n  restore: () => dispatch(restoreClock()),\n  sendScoreToRanking: (name, avatar, score) => dispatch(updateRanking(name, avatar, score)),\n  countRightA: () => dispatch(countRight()),\n  pausecounter: () => dispatch(freezeClock()),\n});\n\nconst mapStateToProps = (state) => ({\n  tolkien: state.apiReducer.token,\n  questions: state.apiReducer.questions,\n  time: state.counterReducer.count,\n  name: state.loginReducer[0].name,\n  avatar: state.loginReducer[0].avatar,\n  score: state.scoreReducer.points,\n  freezing: state.counterReducer.freeze,\n  confCategory: state.configReducer.confCategory,\n  confDifficulty: state.configReducer.confDifficulty,\n  confType: state.configReducer.confType,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);\n\nQuiz.propTypes = {\n  getQuestions: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  tolkien: PropTypes.string.isRequired,\n  time: PropTypes.number.isRequired,\n  restore: PropTypes.func.isRequired,\n  sumPoints: PropTypes.func.isRequired,\n  avatar: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  sendScoreToRanking: PropTypes.func.isRequired,\n  countRightA: PropTypes.func.isRequired,\n  freezing: PropTypes.bool.isRequired,\n  pausecounter: PropTypes.func.isRequired,\n  confCategory: PropTypes.string.isRequired,\n  confDifficulty: PropTypes.string.isRequired,\n  confType: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\n\nimport Header from './Header';\nimport Quiz from './Quiz';\n\n\nexport default class GameScreen extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Quiz />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { changeCategory, changeDifficulty, changeType } from '../actions/index';\n\nconst arrCategory = [\n  { tag: 'General knowledge', id: 9 },\n  { tag: 'Entertainment: Books', id: 10 },\n  { tag: 'Entertainment: Filme', id: 11 },\n  { tag: 'Entertainment: Music', id: 12 },\n  { tag: 'Entertainment: Musicals & Theatres', id: 13 },\n  { tag: 'Entertainment: Television', id: 14 },\n  { tag: 'Entertainment: Video Games', id: 15 },\n  { tag: 'Entertainment: Board Games', id: 16 },\n  { tag: 'Science & Nature', id: 17 },\n  { tag: 'Science: Computers', id: 18 },\n  { tag: 'Science: Mathematics', id: 19 },\n  { tag: 'Mythology', id: 20 },\n  { tag: 'Sports', id: 21 },\n  { tag: 'Geography', id: 22 },\n  { tag: 'History', id: 23 },\n  { tag: 'Politics', id: 24 },\n  { tag: 'Art', id: 25 },\n  { tag: 'Celebrities', id: 26 },\n  { tag: 'Animals', id: 27 },\n  { tag: 'Vehicles', id: 28 },\n  { tag: 'Entertainment: Comics', id: 29 },\n  { tag: 'Science: Gadgets', id: 30 },\n  { tag: 'Entertainment: Japanese Anime & Manga', id: 31 },\n  { tag: 'Entertainment: Cartoon & Animations', id: 32 },\n\n];\nconst arrDifficulty = ['easy', 'medium', 'hard'];\nconst arrType = [\n  { tag: 'Multiple Choice', id: 'multiple' },\n  { tag: 'True / False', id: 'boolean' },\n];\n\nclass ConfigurationScreen extends React.Component {\n  handleCategory(elem) {\n    const { setCategory } = this.props;\n    setCategory(elem);\n  }\n\n  handleDifficulty(elem) {\n    const { setDifficulty } = this.props;\n    setDifficulty(elem);\n  }\n\n  handleType(elem) {\n    const { setType } = this.props;\n    setType(elem);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <title data-testid=\"settings-title\">Configurações</title>\n        <h1 className=\"display-3 text-center\">Configurações</h1>\n        <div className=\"d-flex justify-content-center flex-column\">\n          <p className=\"lead mb-3\">Selecionar Categorias de questões: </p>\n          <select className=\"mb-3\" onChange={(elem) => this.handleCategory(elem.target.value)}>\n            <option value=\"\" />\n            {\n            arrCategory.map((elem) => (\n              <option key={elem.id} value={elem.id}>{elem.tag}</option>\n            ))\n          }\n          </select>\n          <p className=\"lead mb-3\">Selecionar dificuldade: </p>\n          <select className=\"mb-3\" onChange={(elem) => this.handleDifficulty(elem.target.value)}>\n            <option value=\"\" />\n            {arrDifficulty.map((elem) => (<option key={elem}>{elem}</option>))}\n          </select>\n          <p className=\"lead mb-3\">Selecionar múltipla escolha ou verdadeiro/falso: </p>\n          <select onChange={(elem) => this.handleType(elem.target.value)}>\n            <option value=\"\" />\n            {\n            arrType.map((elem) => (\n              <option key={elem.id} value={elem.id}>{elem.tag}</option>\n            ))\n          }\n          </select>\n        </div>\n        <Link to=\"/\" className=\"btn btn-primary btn-lg mt-3\">Voltar </Link>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setCategory: (cofCategory) => dispatch(changeCategory(cofCategory)),\n  setDifficulty: (cofDifficulty) => dispatch(changeDifficulty(cofDifficulty)),\n  setType: (cofType) => dispatch(changeType(cofType)),\n\n});\n\nexport default connect(null, mapDispatchToProps)(ConfigurationScreen);\n\nConfigurationScreen.propTypes = {\n  setCategory: PropTypes.func.isRequired,\n  setDifficulty: PropTypes.func.isRequired,\n  setType: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackAnswears = (props) => {\n  const { totalAnswears } = props;\n  return (\n    <div>\n      {(totalAnswears < 3) ? <h1 className=\"display-4\" data-testid=\"feedback-text\">Podia ser melhor...</h1>\n        : <h1 className=\"display-4\" data-testid=\"feedback-text\">Mandou bem!</h1>}\n    </div>\n  );\n};\n\nexport default FeedbackAnswears;\n\nFeedbackAnswears.propTypes = {\n  totalAnswears: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Header from './Header';\nimport FeedbackAnswears from './FeedbackAnswears';\nimport { clearLoginInfo, clearLoginPoints } from '../actions/index';\n\nclass Feedback extends React.Component {\n  restartGame() {\n    const { clearlogin } = this.props;\n    clearlogin();\n  }\n\n  newGame() {\n    const { clearpoints } = this.props;\n    clearpoints();\n  }\n\n  tryAgain() {\n    return (\n      <Link to=\"/gamepage\">\n        <button className=\"btn btn-primary btn-lg m-2\" type=\"button\" onClick={() => this.newGame()}>Tentar novamente</button>\n      </Link>\n    );\n  }\n\n  render() {\n    const { totalAns, scorePoints } = this.props;\n    return (\n      <div>\n        <Header />\n        <div className=\"container\">\n          <div className=\"jumbotron mt-3\">\n            <FeedbackAnswears totalAnswears={totalAns} />\n            <div p-3>\n              <span className=\"lead\">Você acertou </span>\n              <span className=\"lead\" data-testid=\"feedback-total-question\">{totalAns}</span>\n              <span className=\"lead\"> questões</span>\n            </div>\n            <div p-3 mb-3>\n              <span className=\"lead\">Fez um total de </span>\n              <span className=\"lead\" data-testid=\"feedback-total-score\">{scorePoints}</span>\n              <span className=\"lead\"> pontos</span>\n              <hr />\n            </div>\n            {this.tryAgain()}\n            <Link to=\"/\">\n              <button className=\"btn btn-primary btn-lg m-2\" type=\"button\" onClick={() => this.restartGame()} data-testid=\"btn-play-again\">\n                Jogar novamente\n              </button>\n            </Link>\n            <Link to=\"/rankingscreen\">\n              <button className=\"btn btn-info btn-lg m-2\" type=\"button\" onClick={() => this.restartGame()} data-testid=\"btn-ranking\">\n                Ver Ranking\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  totalAns: state.scoreReducer.answers,\n  scorePoints: state.scoreReducer.points,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearlogin: () => dispatch(clearLoginInfo()),\n  clearpoints: () => dispatch(clearLoginPoints()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n\nFeedback.propTypes = {\n  totalAns: PropTypes.number.isRequired,\n  scorePoints: PropTypes.number.isRequired,\n  clearlogin: PropTypes.func.isRequired,\n  clearpoints: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass RankingScreen extends Component {\n  render() {\n    const { ranking } = this.props;\n    return (\n      <div className=\"container\">\n        <h1 className=\"display-3 text-center\" data-testid=\"ranking-title\">RANKING</h1>\n        <ul className=\"list-group mb-4\">\n          {ranking.sort(function (a, b) { return b.score - a.score; }).map((e, i) => (\n            <li className=\"list-group-item\">\n              <img className=\"rounded\" src={`https://www.gravatar.com/avatar/${e.avatar}`} alt=\"avatar\" />\n              <span className=\"lead px-3\" data-testid={`player-name-${i}`}>{e.name}</span>\n              <span className=\"badge badge-primary px-3\" data-testid={`player-score-${i}`}>{e.score}</span>\n            </li>\n          ))}\n        </ul>\n        <Link to=\"/\">\n          <button\n            className=\"btn btn-primary\"\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n          >\n            Início\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ranking: state.rankingReducer,\n});\n\nexport default connect(mapStateToProps)(RankingScreen);\n\nRankingScreen.propTypes = {\n  ranking: PropTypes.shape({\n    name: PropTypes.string,\n    score: PropTypes.number,\n    avatar: PropTypes.string,\n  }).isRequired,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GENERATE_TOKEN, STORE_QUESTIONS } from '../actions/index';\n\nconst initialState = {\n  token: '',\n  questions: [],\n};\n\nconst apiReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GENERATE_TOKEN:\n      localStorage.setItem('token', action.payload.data.token);\n      return { ...state, token: action.payload.data.token };\n    case STORE_QUESTIONS:\n      console.log(state);\n      return {\n        ...state,\n        questions: [...action.payload.data.results],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default apiReducer;\n","import { SAVE_USER_DATA, CLEAR_LOGIN_INFO } from '../actions/index';\n\nconst INITIAL_STATE = [];\n\nconst loginReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SAVE_USER_DATA: return [...state, { name: action.name, avatar: action.avatar }];\n    case CLEAR_LOGIN_INFO: return [];\n    default: return state;\n  }\n};\n\nexport default loginReducer;\n","import {\n  UPDATE_SCORE,\n  CLEAR_LOGIN_INFO,\n  COUNT_RIGHT_ANSWEAR,\n  CLEAR_LOGIN_POINTS,\n} from '../actions/index';\n\nconst INITIAL_STATE = {\n  points: 0,\n  answers: 0,\n};\n\nconst scoreReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CLEAR_LOGIN_INFO: return { ...state, points: 0, answers: 0 };\n    case CLEAR_LOGIN_POINTS: return { ...state, points: 0, answers: 0 };\n    case UPDATE_SCORE: {\n      return {\n        ...state,\n        points: state.points + action.points,\n      };\n    }\n    case COUNT_RIGHT_ANSWEAR: {\n      return {\n        ...state,\n        answers: state.answers + 1,\n      };\n    }\n    default: return state;\n  }\n};\n\nexport default scoreReducer;\n","import { TICK_TOCK, RESTORE_CLOCK, CLOCK_FREEZED } from '../actions/index';\n\nconst INITIAL_STATE = {\n  count: 30,\n};\n\nconst counterReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case TICK_TOCK:\n      return {\n        ...state,\n        count: state.count - 1,\n      };\n\n    case CLOCK_FREEZED:\n      return {\n        ...state,\n        freeze: true,\n      };\n\n\n    case RESTORE_CLOCK:\n      return {\n        ...state,\n        count: 30,\n        freeze: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;\n","import { UPDATE_RANKING } from '../actions/index';\n\nconst initialState = [];\n\nconst rankingReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_RANKING: return [...state,\n      { name: action.name, avatar: action.avatar, score: action.score }];\n    default:\n      return state;\n  }\n};\n\nexport default rankingReducer;\n","import { CONFIG_CATEGORY, CONFIG_DIFFICULTY, CONFIG_TYPE } from '../actions/index';\n\nconst initialState = {\n  confCategory: '',\n  confDifficulty: '',\n  confType: '',\n};\n\nconst configReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONFIG_CATEGORY:\n      return {\n        ...state,\n        confCategory: action.confCategory,\n      };\n    case CONFIG_DIFFICULTY:\n      return {\n        ...state,\n        confDifficulty: action.confDifficulty,\n      };\n    case CONFIG_TYPE:\n      return {\n        ...state,\n        confType: action.confType,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default configReducer;\n","import { combineReducers } from 'redux';\nimport apiReducer from './apiReducer';\nimport loginReducer from './loginReducer';\nimport scoreReducer from './scoreReducer';\nimport counterReducer from './counterReducer';\nimport rankingReducer from './rankingReducer';\nimport configReducer from './configReducer';\n\nconst rootReducer = combineReducers({\n  apiReducer,\n  loginReducer,\n  scoreReducer,\n  counterReducer,\n  rankingReducer,\n  configReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect } from 'react';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nimport Home from './components/Home';\nimport GameScreen from './components/GameScreen';\nimport ConfigurationScreen from './components/ConfigurationScreen';\nimport Feedback from './components/Feedback';\nimport RankingScreen from './components/RankingScreen';\n\n\nexport default function App() {\n  useEffect(() => {\n    document.title = 'Trivia Game'\n  }, [])\n  return (\n    <div>\n      <Router basename=\"/trivia-game\">\n        <Switch>\n          <Route exact path=\"/gamepage\" component={GameScreen} />\n          <Route exact path=\"/rankingscreen\" component={RankingScreen} />\n          <Route exact path=\"/feedback\" component={Feedback} />\n          <Route exact path=\"/Configuration\" component={ConfigurationScreen} />\n          <Route exact path=\"/\" component={Home} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n"],"sourceRoot":""}